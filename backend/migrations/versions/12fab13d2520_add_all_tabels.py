"""add all tabels

Revision ID: 12fab13d2520
Revises: 0157aa016058
Create Date: 2025-10-25 06:21:27.257101

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '12fab13d2520'
down_revision: Union[str, Sequence[str], None] = '0157aa016058'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('business_segments',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('oid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('cost_status',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('oid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('cost_types',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('oid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('evaluation_types',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('oid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('payment_types',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('oid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('revenue_status',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('oid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('services',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('oid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('stages',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('probability', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('oid'),
    sa.UniqueConstraint('name')
    )
    op.create_table('dashboards',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('config', sa.JSON(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('update_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.oid'], ),
    sa.PrimaryKeyConstraint('oid')
    )
    op.create_table('projects',
    sa.Column('organization_name', sa.String(length=500), nullable=False),
    sa.Column('inn', sa.String(length=12), nullable=True),
    sa.Column('name', sa.String(length=500), nullable=False),
    sa.Column('service_id', sa.UUID(), nullable=False),
    sa.Column('payment_type_id', sa.UUID(), nullable=True),
    sa.Column('stage_id', sa.UUID(), nullable=False),
    sa.Column('manager_id', sa.UUID(), nullable=False),
    sa.Column('business_segment_id', sa.UUID(), nullable=True),
    sa.Column('implementation_year', sa.Integer(), nullable=True),
    sa.Column('is_industry_solution', sa.Boolean(), nullable=False),
    sa.Column('is_forecast_accepted', sa.Boolean(), nullable=False),
    sa.Column('is_dzo_implementation', sa.Boolean(), nullable=False),
    sa.Column('requires_management_control', sa.Boolean(), nullable=False),
    sa.Column('accepted_for_evaluation_id', sa.UUID(), nullable=True),
    sa.Column('industry_manager', sa.String(length=255), nullable=True),
    sa.Column('project_number', sa.String(length=100), nullable=True),
    sa.Column('created_date', sa.Date(), nullable=False),
    sa.Column('current_status', sa.Text(), nullable=True),
    sa.Column('completed_this_period', sa.Text(), nullable=True),
    sa.Column('plans_next_period', sa.Text(), nullable=True),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('update_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['accepted_for_evaluation_id'], ['evaluation_types.oid'], ),
    sa.ForeignKeyConstraint(['business_segment_id'], ['business_segments.oid'], ),
    sa.ForeignKeyConstraint(['manager_id'], ['users.oid'], ),
    sa.ForeignKeyConstraint(['payment_type_id'], ['payment_types.oid'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.oid'], ),
    sa.ForeignKeyConstraint(['stage_id'], ['stages.oid'], ),
    sa.PrimaryKeyConstraint('oid')
    )
    op.create_table('refresh_tokens',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('expired_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.oid'], ),
    sa.PrimaryKeyConstraint('oid')
    )
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    op.create_table('reports',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('config', sa.JSON(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('update_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.oid'], ),
    sa.PrimaryKeyConstraint('oid')
    )
    op.create_table('comments',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('update_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.oid'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.oid'], ),
    sa.PrimaryKeyConstraint('oid')
    )
    op.create_index(op.f('ix_comments_project_id'), 'comments', ['project_id'], unique=False)
    op.create_index(op.f('ix_comments_user_id'), 'comments', ['user_id'], unique=False)
    op.create_table('financial_periods',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('month', sa.Integer(), nullable=False),
    sa.Column('revenue', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('revenue_status_id', sa.UUID(), nullable=True),
    sa.Column('costs', sa.Numeric(precision=15, scale=2), nullable=True),
    sa.Column('cost_type_id', sa.UUID(), nullable=True),
    sa.Column('cost_status_id', sa.UUID(), nullable=True),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('update_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['cost_status_id'], ['cost_status.oid'], ),
    sa.ForeignKeyConstraint(['cost_type_id'], ['cost_types.oid'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.oid'], ),
    sa.ForeignKeyConstraint(['revenue_status_id'], ['revenue_status.oid'], ),
    sa.PrimaryKeyConstraint('oid')
    )
    op.create_index(op.f('ix_financial_periods_project_id'), 'financial_periods', ['project_id'], unique=False)
    op.create_table('project_historys',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('field_changed', sa.String(length=255), nullable=False),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('changed_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.oid'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.oid'], ),
    sa.PrimaryKeyConstraint('oid')
    )
    op.create_index(op.f('ix_project_historys_project_id'), 'project_historys', ['project_id'], unique=False)
    op.create_index(op.f('ix_project_historys_user_id'), 'project_historys', ['user_id'], unique=False)
    op.create_table('project_predictions',
    sa.Column('project_id', sa.UUID(), nullable=False),
    sa.Column('predicted_revenue', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('probability', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('forecast_date', sa.Date(), nullable=False),
    sa.Column('calculated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('oid', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('update_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.oid'], ),
    sa.PrimaryKeyConstraint('oid')
    )
    op.create_index(op.f('ix_project_predictions_project_id'), 'project_predictions', ['project_id'], unique=False)
    op.drop_index(op.f('ix_refreshtokens_user_id'), table_name='refreshtokens')
    op.drop_table('refreshtokens')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('refreshtokens',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('expired_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('oid', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.oid'], name=op.f('refreshtokens_user_id_fkey')),
    sa.PrimaryKeyConstraint('oid', name=op.f('refreshtokens_pkey'))
    )
    op.create_index(op.f('ix_refreshtokens_user_id'), 'refreshtokens', ['user_id'], unique=False)
    op.drop_index(op.f('ix_project_predictions_project_id'), table_name='project_predictions')
    op.drop_table('project_predictions')
    op.drop_index(op.f('ix_project_historys_user_id'), table_name='project_historys')
    op.drop_index(op.f('ix_project_historys_project_id'), table_name='project_historys')
    op.drop_table('project_historys')
    op.drop_index(op.f('ix_financial_periods_project_id'), table_name='financial_periods')
    op.drop_table('financial_periods')
    op.drop_index(op.f('ix_comments_user_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_project_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_table('reports')
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_table('projects')
    op.drop_table('dashboards')
    op.drop_table('stages')
    op.drop_table('services')
    op.drop_table('revenue_status')
    op.drop_table('payment_types')
    op.drop_table('evaluation_types')
    op.drop_table('cost_types')
    op.drop_table('cost_status')
    op.drop_table('business_segments')
    # ### end Alembic commands ###
